function readPDFasBook(urltoPDF,prev_btn,next_btn,bookID,scale_val){
    const url = urltoPDF; 
      let pdfDoc = null;
      let pages = [];

      const prevBtn = document.getElementById(prev_btn);
      const nextBtn = document.getElementById(next_btn);
      const book = document.getElementById(bookID);

      prevBtn.addEventListener("click", goPrevPage);
      nextBtn.addEventListener("click", goNextPage);

      let scale = scale_val;

      async function renderPages() {
        let zIndex = pages.length;
        for (let num = 1; num <= pages.length; num += 2) {
          pageRendering = true;
          let page1 = pages[num - 1];
          let page2 = null;

          if (num < pages.length) {
            page2 = pages[num];
          }

          let viewport1 = page1.getViewport({ scale: scale });

          let paper = document.createElement('div');
          let front = document.createElement('div');
          let frontContent = document.createElement('div');
          let back = document.createElement('div');
          let backContent = document.createElement('div');
          let canvasFront = document.createElement('canvas');
          let canvasBack = document.createElement('canvas');

          paper.className = 'paper';
          paper.id = 'p' + Math.ceil(num / 2);
          paper.style.zIndex = pages.length-num;
          front.className = 'front';
          back.className = 'back';
          frontContent.className = 'front-content';
          backContent.className = 'back-content';
          canvasFront.id = 'canvas' + num;
          canvasBack.id = 'canvas' + (num + 1);

          frontContent.appendChild(canvasFront);
          backContent.appendChild(canvasBack);
          front.appendChild(frontContent);
          back.appendChild(backContent);
          paper.appendChild(front);
          paper.appendChild(back);
          book.appendChild(paper);
          console.log(viewport1.height+"-"+viewport1.width)
          let contextFront = canvasFront.getContext('2d');
          canvasFront.height = viewport1.height;
          canvasFront.width = viewport1.width;
          let renderContextFront = {
            canvasContext: contextFront,
            viewport: viewport1
          };
          page1.render(renderContextFront);

          if (page2) {
            let viewport2 = page2.getViewport({ scale: scale });
            let contextBack = canvasBack.getContext('2d');
            canvasBack.height = viewport2.height;
            canvasBack.width = viewport2.width;
            let renderContextBack = {
              canvasContext: contextBack,
              viewport: viewport2
            };
            page2.render(renderContextBack);
          } else {
            canvasBack.parentNode.removeChild(canvasBack);
          }

          front.style.zIndex = zIndex;
          back.style.zIndex = zIndex - 1;
        }
      }


      function goNextPage() {
        if (currentLocation < maxLocation) {
          let currentPage = document.querySelector(`#p${currentLocation}`);
          currentPage.classList.add("flipped");
          currentPage.style.zIndex = pages.length + 1;
          openBook();
          currentLocation++;
          if (currentLocation > 1) {
            prevBtn.style.display = "block";
          }
        }
        if (currentLocation == maxLocation) {
          book.style.transform = "translateX(100%)";
          prevBtn.style.transform = "translateX(0px)";
          nextBtn.style.display = "none";
        }
      }


      function goPrevPage() {
        if (currentLocation > 1) {
          nextBtn.style.display = "block"; 
          currentLocation--;
          let currentPage = document.querySelector(`#p${currentLocation}`);
          currentPage.classList.remove("flipped");
          currentPage.style.zIndex = pages.length - currentLocation ;
          if (currentLocation == 1) {
            prevBtn.style.display = "none";
          }
          let nextPage = document.querySelector(`#p${currentLocation + 1}`);
          if (nextPage) {
            nextPage.style.zIndex = maxLocation-currentLocation;
          }
        }
        if(currentLocation == maxLocation-1){
          book.style.transform = "translateX(50%)";
          prevBtn.style.transform = "translateX(-380px)";
          nextBtn.style.transform = "translateX(380px)";

        }
        if(currentLocation == 1){
          book.style.transform = "translateX(0%)";
          nextBtn.style.transform = "translateX(0px)";
        }
      }


      let currentLocation = 1;
      let maxLocation = 0;

      function openBook() {
        book.style.transform = "translateX(50%)";
        prevBtn.style.transform = "translateX(-380px)";
        nextBtn.style.transform = "translateX(380px)";
      }


      pdfjsLib.getDocument(url).promise.then(async function (pdfDoc_) {
        pdfDoc = pdfDoc_;
        for (let i = 1; i <= pdfDoc.numPages; i++) {
          let page = await pdfDoc.getPage(i);
          pages.push(page);
        }
        renderPages();
        maxLocation = Math.ceil(pdfDoc.numPages / 2) + 1;
      });
    } 